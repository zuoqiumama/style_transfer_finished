# -*- coding: utf-8 -*-
import os.path
import sys
import threading
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QPixmap, QFont
# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from qt_material import apply_stylesheet
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QGridLayout, QFileDialog, QMessageBox, QWidget

from transfer import ImgTransfer


class StyleTransferTab(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")

        # 根据显示器大小确定组件大小
        desktop = QApplication.desktop()
        screenRect = desktop.screenGeometry()
        screenheight = screenRect.height()
        screenwidth = screenRect.width()
        btn_width = (screenwidth * 0.6 - 30) * 0.3 * 0.8
        btn_height = btn_width * 0.4 * 0.8
        span = 25
        label_img_w = (screenwidth * 0.6 - 30) * 0.3
        label_img_h = label_img_w * 0.4

        # 图像路径信息存储
        self.path_content_img = ''
        self.path_style_img = ''
        self.path_res_img = ''
        self.isSR = True
        self.mode = ''

        MainWindow.resize(screenwidth * 0.6, screenheight * 0.6)
        MainWindow.setStyleSheet("background-color:white;")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")


        self.btn_monet = QtWidgets.QRadioButton(self.centralwidget)
        self.btn_monet.clicked.connect(self.mode_choose)
        self.btn_monet.setGeometry(QtCore.QRect(3 * span + 2 * btn_width, span, btn_width, btn_height))
        self.btn_cezanne = QtWidgets.QRadioButton(self.centralwidget)
        self.btn_cezanne.clicked.connect(self.mode_choose)
        self.btn_cezanne.setGeometry(QtCore.QRect(3 * span + 2 * btn_width, 2 * span + btn_height, btn_width, btn_height))
        self.btn_ukiyoe = QtWidgets.QRadioButton(self.centralwidget)
        self.btn_ukiyoe.clicked.connect(self.mode_choose)
        self.btn_ukiyoe.setGeometry(QtCore.QRect(4 * span + 3 * btn_width, span, btn_width, btn_height))
        self.btn_vangogh = QtWidgets.QRadioButton(self.centralwidget)
        self.btn_vangogh.clicked.connect(self.mode_choose)
        self.btn_vangogh.setGeometry(QtCore.QRect(4 * span + 3 * btn_width, 2 * span + btn_height, btn_width, btn_height))


        self.btn_load_content_img = QtWidgets.QPushButton(self.centralwidget)
        self.btn_load_content_img.setGeometry(QtCore.QRect(span, span, btn_width, btn_height))
        icon = QtGui.QIcon.fromTheme("规范")
        self.btn_load_content_img.setIcon(icon)
        self.btn_load_content_img.setObjectName("btn_load_content_img")
        self.btn_load_content_img.clicked.connect(self.load_content_img)

        self.btn_load_style_img = QtWidgets.QPushButton(self.centralwidget)
        self.btn_load_style_img.setGeometry(QtCore.QRect(span, 2 * span + btn_height, btn_width, btn_height))
        icon = QtGui.QIcon.fromTheme("规范")
        self.btn_load_style_img.setIcon(icon)
        self.btn_load_style_img.setObjectName("btn_load_style_img")
        self.btn_load_style_img.clicked.connect(self.load_style_img)

        self.btn_transfer_VGG = QtWidgets.QPushButton(self.centralwidget)
        self.btn_transfer_VGG.setGeometry(QtCore.QRect(2 * span + btn_width, span, btn_width, btn_height))
        icon = QtGui.QIcon.fromTheme("规范")
        self.btn_transfer_VGG.setIcon(icon)
        self.btn_transfer_VGG.setObjectName("btn_transfer_VGG")
        self.btn_transfer_VGG.clicked.connect(self.VGG_transfer)

        self.btn_transfer_GAN = QtWidgets.QPushButton(self.centralwidget)
        self.btn_transfer_GAN.setGeometry(
            QtCore.QRect(2 * span + btn_width, 2 * span + btn_height, btn_width, btn_height))
        icon = QtGui.QIcon.fromTheme("规范")
        self.btn_transfer_GAN.setIcon(icon)
        self.btn_transfer_GAN.setObjectName("btn_transfer_GAN")
        self.btn_transfer_GAN.clicked.connect(self.GAN_transfer)

        self.log_label = QtWidgets.QLabel(self.centralwidget)
        self.log_label.setGeometry(QtCore.QRect(span, 4 * span + 5 * btn_height + 5, screenwidth * 0.8, 50))
        self.log_label.setObjectName("log_label")
        font = QFont()
        font.setPointSize(35)
        self.log_label.setFont(font)
        self.log_label.setWordWrap(True)
        self.log_label.setText("welcome!")

        self.info_label_1 = QtWidgets.QLabel(self.centralwidget)
        self.info_label_1.setGeometry(QtCore.QRect(span, 3 * span + 2 * btn_height + 5, 60, 10))
        self.info_label_1.setObjectName("info_label")
        self.info_label_1.setWordWrap(True)

        self.content_img = QtWidgets.QLabel(self.centralwidget)
        self.content_img.setGeometry(
            QtCore.QRect(span, 3 * span + 2 * btn_height + 10 + 5, label_img_w, label_img_h * 2))
        self.content_img.setObjectName("content_img")

        self.info_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.info_label_2.setGeometry(QtCore.QRect(2 * span + label_img_w, 3 * span + 2 * btn_height + 5, 60, 10))
        self.info_label_2.setObjectName("info_label_2")
        self.info_label_2.setWordWrap(True)

        self.style_img = QtWidgets.QLabel(self.centralwidget)
        self.style_img.setGeometry(
            QtCore.QRect(2 * span + label_img_w, 3 * span + 2 * btn_height + 10 + 5, label_img_w, label_img_h * 2))
        self.style_img.setObjectName("style_img")

        self.info_label_3 = QtWidgets.QLabel(self.centralwidget)
        self.info_label_3.setGeometry(QtCore.QRect(3 * span + 2 * label_img_w, 3 * span + 2 * btn_height + 5, 60, 10))
        self.info_label_3.setObjectName("info_label_3")
        self.info_label_3.setWordWrap(True)

        self.res_img = QtWidgets.QLabel(self.centralwidget)
        self.res_img.setGeometry(
            QtCore.QRect(3 * span + 2 * label_img_w, 3 * span + 2 * btn_height + 10 + 5, label_img_w, label_img_h * 2))
        self.res_img.setObjectName("res_img")

#        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
#        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
#        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_monet.setText(_translate("MainWindow", "monet2photo"))
        self.btn_cezanne.setText(_translate("MainWindow", "cezanne2photo"))
        self.btn_ukiyoe.setText(_translate("MainWindow", "ukiyoe2photo"))
        self.btn_vangogh.setText(_translate("MainWindow", "vangogh2photo"))
        self.btn_load_content_img.setText(_translate("MainWindow", "上传内容图像"))
        self.btn_load_style_img.setText(_translate("MainWindow", "上传风格图像"))
        self.btn_transfer_VGG.setText(_translate("MainWindow", "卷积图像风格迁移"))
        self.btn_transfer_GAN.setText(_translate("MainWindow", "GAN图像风格迁移"))
        self.info_label_1.setText(_translate("MainWindow", "内容图像"))
        self.content_img.setText(_translate("MainWindow", "内容图像"))
        self.info_label_2.setText(_translate("MainWindow", "风格图像"))
        self.style_img.setText(_translate("MainWindow", "风格图像"))
        self.info_label_3.setText(_translate("MainWindow", "结果图像"))
        self.res_img.setText(_translate("MainWindow", "结果图像"))



    def load_content_img(self):
        self.path_content_img = QFileDialog.getOpenFileName(None, "请选择内容图片",
                                                            "E:\毕设\style_transfer\content_img")
        self.log_label.setText(f"load content img form {self.path_content_img[0]}")
        self.content_img.setPixmap(QPixmap(self.path_content_img[0]))
        self.content_img.setScaledContents(True)

    def load_style_img(self):
        self.path_style_img = QFileDialog.getOpenFileName(None, "请选择风格图片",
                                                          "E:\毕设\style_transfer\style_img")
        self.log_label.setText(f"load style img form {self.path_style_img[0]}")
        self.style_img.setPixmap(QPixmap(self.path_style_img[0]))
        self.style_img.setScaledContents(True)

    def VGG_transfer(self):
        if self.path_content_img == '' or self.path_style_img == '':
            self._exert_error("content image or style image should be input")
            return
        self.log_label.setText(f"loading")
        self.t = TransferTread(self.path_content_img[0], self.path_style_img[0], isGAN=False, isSR=self.isSR)
        self.t._res.connect(self.VGG_transfer_t)
        self.btn_transfer_VGG.setEnabled(False)
        self.t.start()

    def VGG_transfer_t(self, res):
        self.path_res_img = res
        self.res_img.setPixmap(QPixmap(self.path_res_img))
        self.res_img.setScaledContents(True)
        self.log_label.setText(f"result img saved in {self.path_res_img}")
        self.btn_transfer_VGG.setEnabled(True)

    def GAN_transfer(self):
        if self.path_content_img == '':
            self._exert_error("content image or style image should be input")
            return
        self.btn_transfer_GAN.setEnabled(False)
        self.log_label.setText(f"loading")
        if self.mode == '':
            self._exert_error("one mode should be chosen when using GAN transfer")
            return
        self.t = TransferTread(self.path_content_img[0], isGAN=True, isSR=self.isSR, mode=self.mode)
        self.t._res.connect(self.GAN_transfer_t)
        self.t.start()

    def GAN_transfer_t(self, res):
        self.path_res_img = res
        self.res_img.setPixmap(QPixmap(self.path_res_img))
        self.res_img.setScaledContents(True)
        self.log_label.setText(f"result img saved in {self.path_res_img}")
        self.btn_transfer_GAN.setEnabled(True)

    def mode_choose(self):
        self.mode = self.sender().text()

    def _exert_error(self, msg):
        QMessageBox.critical(self, "错误", msg)


class TransferTread(QThread):
    _res = pyqtSignal(str)

    def __init__(self, path_content_img, path_style_img=None, epochs=2500, isSR=True, isGAN=False, mode=None):
        super().__init__()
        self.path_c = path_content_img
        self.path_s = path_style_img
        self.epochs = epochs
        self.isSR = isSR
        self.isGan = isGAN
        self.mode = mode

    def run(self):
        if not self.isGan:
            trans = ImgTransfer(self.path_c, self.path_s)
            res = trans.transfer(self.epochs)
            self._res.emit(res)
        else:
            if self.mode is None:
                self._res.emit(-1)
            res = ImgTransfer.transfer_GAN(self.path_c, self.isSR, mode=self.mode)
            self._res.emit(res)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(window)
    apply_stylesheet(app, theme='light_purple.xml')
    window.show()
    sys.exit(app.exec_())
