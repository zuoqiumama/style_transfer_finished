# -*- coding: utf-8 -*-
import socket

import PIL.Image
import qrcode
# Form implementation generated from reading ui file 'style_page.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal, QEvent
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QWidget
from PyQt5.QtCore import Qt
from matplotlib import pyplot as plt

from transfer import ImgTransfer


class StylePage(QWidget):
    def setupUi(self, Form):
        """
        param that help transfer style
        """
        self.path_content_img = ''
        self.path_style_img = ''
        self.path_res_img = ''
        self.isSR = False
        self.mode = ''

        """
        init host ip address
        """
        hostname = socket.gethostname()
        ip_address = socket.gethostbyname(hostname)
        self.url = "https://" + ip_address + ":5000"
        print(f"[style page] qrcode url = {self.url}")

        self.setObjectName("Form")
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(10, 10, 1121, 853))
        self.widget.setMinimumSize(1121, 853)
        self.widget.setObjectName("widget")
        self.widget.setStyleSheet("background: transparent")

        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        self.widget_2 = QtWidgets.QWidget(self.widget)
        self.widget_2.setMinimumSize(QtCore.QSize(351, 131))
        self.widget_2.setObjectName("widget_2")
        self.widget_2.setStyleSheet("background-color: rgb(0, 55, 255)")

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.btn_load_content = QtWidgets.QPushButton(self.widget_2)
        self.btn_load_content.setMinimumSize(QtCore.QSize(131, 81))
        self.btn_load_content.setObjectName("pushButton")
        self.btn_load_content.clicked.connect(self.load_content_img)
        self.horizontalLayout.addWidget(self.btn_load_content)

        self.btn_load_style = QtWidgets.QPushButton(self.widget_2)
        self.btn_load_style.setMinimumSize(QtCore.QSize(131, 81))
        self.btn_load_style.setObjectName("pushButton_2")
        self.btn_load_style.clicked.connect(self.load_style_img)
        self.horizontalLayout.addWidget(self.btn_load_style)

        self.gridLayout.addWidget(self.widget_2, 0, 0, 1, 1)
        self.widget_3 = QtWidgets.QWidget(self.widget)
        self.widget_3.setMinimumSize(QtCore.QSize(401, 131))
        self.widget_3.setObjectName("widget_3")
        self.widget_3.setStyleSheet("background-color: rgb(10, 255, 100)")

        self.btn_transfer_VGG = QtWidgets.QPushButton(self.widget_3)
        self.btn_transfer_VGG.setGeometry(QtCore.QRect(121, 10, 111, 41))
        self.btn_transfer_VGG.clicked.connect(self.VGG_transfer)

        self.btn_clear_mode = QtWidgets.QPushButton(self.widget_3)
        self.btn_clear_mode.setGeometry(QtCore.QRect(221, 10, 111, 41))
        self.btn_clear_mode.clicked.connect(self.clear_mode)

        self.btn_transfer_GAN = QtWidgets.QPushButton(self.widget_3)
        self.btn_transfer_GAN.setGeometry(QtCore.QRect(10, 10, 111, 41))
        self.btn_transfer_GAN.setObjectName("label")
        self.btn_transfer_GAN.clicked.connect(self.GAN_transfer)

        self.radioButton = QtWidgets.QRadioButton(self.widget_3)
        self.radioButton.setGeometry(QtCore.QRect(10, 70, 86, 25))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.widget_3)
        self.radioButton_2.setGeometry(QtCore.QRect(110, 70, 86, 25))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.widget_3)
        self.radioButton_3.setGeometry(QtCore.QRect(200, 70, 86, 25))
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(self.widget_3)
        self.radioButton_4.setGeometry(QtCore.QRect(310, 70, 86, 25))
        self.radioButton_4.setObjectName("radioButton_4")
        self.radioButton.clicked.connect(self.mode_choose)
        self.radioButton_2.clicked.connect(self.mode_choose)
        self.radioButton_3.clicked.connect(self.mode_choose)
        self.radioButton_4.clicked.connect(self.mode_choose)
        self.gridLayout.addWidget(self.widget_3, 0, 1, 1, 1)

        self.widget_4 = QtWidgets.QWidget(self.widget)
        self.widget_4.setMinimumSize(QtCore.QSize(771, 381))
        self.widget_4.setObjectName("widget_4")
        self.widget_4.setStyleSheet("background-color: rgb(3, 100, 3)")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_4)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.content_img = QtWidgets.QLabel(self.widget_4)
        self.content_img.setMinimumSize(QtCore.QSize(301, 251))
        self.content_img.setMaximumSize(QtCore.QSize(301, 251))
        self.content_img.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.content_img)
        self.style_img = QtWidgets.QLabel(self.widget_4)
        self.style_img.setMinimumSize(QtCore.QSize(301, 251))
        self.style_img.setMaximumSize(QtCore.QSize(301, 251))
        self.style_img.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.style_img)
        self.res_img = QtWidgets.QLabel(self.widget_4)
        self.res_img.setMinimumSize(QtCore.QSize(301, 251))
        self.res_img.setMaximumSize(QtCore.QSize(301, 251))
        self.res_img.setObjectName("label_4")
        self.res_img.mousePressEvent = self._create_click_handler
        self.horizontalLayout_2.addWidget(self.res_img)
        self.gridLayout.addWidget(self.widget_4, 1, 0, 1, 2)

        self.widget_5 = QtWidgets.QWidget(self.widget)
        self.widget_5.setMinimumSize(QtCore.QSize(771, 61))
        self.widget_5.setObjectName("widget_5")
        self.widget_5.setStyleSheet("background-color: rgb(34, 64, 214)")

        self.log_label = QtWidgets.QLabel(self.widget_5)
        self.log_label.setGeometry(QtCore.QRect(20, 10, 741, 41))
        self.log_label.setObjectName("label_5")
        self.gridLayout.addWidget(self.widget_5, 2, 0, 1, 2)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.btn_load_content.setText(_translate("Form", "选择内容图像"))
        self.btn_load_style.setText(_translate("Form", "选择风格图像"))
        self.btn_transfer_GAN.setText(_translate("Form", "使用现成模型"))
        self.btn_transfer_VGG.setText(_translate("Form", "风格迁移"))
        self.radioButton.setText(_translate("Form", "monet"))
        self.radioButton_2.setText(_translate("Form", "cezanne"))
        self.radioButton_3.setText(_translate("Form", "ukiyoe"))
        self.radioButton_4.setText(_translate("Form", "vangogh"))
        self.content_img.setText(_translate("Form", "内容"))
        self.style_img.setText(_translate("Form", "风格"))
        self.res_img.setText(_translate("Form", "结果"))
        self.log_label.setText(_translate("Form", "Welcome!"))
        self.btn_clear_mode.setText(_translate("Form", "清空"))

    def clear_mode(self):
        print("clear mode")
        self.mode = ''
        self.radioButton.setChecked(False)
        self.radioButton_2.setChecked(False)
        self.radioButton_3.setChecked(False)
        self.radioButton_4.setChecked(False)
        rr = 1

    def load_content_img(self):
        self.path_content_img = QFileDialog.getOpenFileName(None, "请选择内容图片",
                                                            "E:\毕设\style_transfer\content_img")
        self.log_label.setText(f"load content img form {self.path_content_img[0]}")
        self.content_img.setPixmap(QPixmap(self.path_content_img[0]))
        self.content_img.setScaledContents(True)

    def load_style_img(self):
        self.path_style_img = QFileDialog.getOpenFileName(None, "请选择风格图片",
                                                          "E:\毕设\style_transfer\style_img")
        self.log_label.setText(f"load style img form {self.path_style_img[0]}")
        self.style_img.setPixmap(QPixmap(self.path_style_img[0]))
        self.style_img.setScaledContents(True)

    def VGG_transfer(self):
        if self.path_content_img == '' or self.path_style_img == '':
            self._exert_error("content image or style image should be input")
            return
        self.log_label.setText(f"loading")
        self.t = TransferTread(self.path_content_img[0], self.path_style_img[0], isGAN=False, isSR=self.isSR,
                               epochs=2500)
        self.t._res.connect(self.VGG_transfer_t)
        self.btn_transfer_VGG.setEnabled(False)
        self.t.start()

    def VGG_transfer_t(self, res):
        self.path_res_img = res
        self.res_img.setPixmap(QPixmap(self.path_res_img))
        self.res_img.setScaledContents(True)
        self.log_label.setText(f"result img saved in {self.path_res_img}")
        self.btn_transfer_VGG.setEnabled(True)

    def GAN_transfer(self):
        if self.path_content_img == '':
            self._exert_error("content image or style image should be input")
            return
        self.btn_transfer_GAN.setEnabled(False)
        self.log_label.setText(f"loading")
        if self.mode == '':
            self._exert_error("one mode should be chosen when using GAN transfer")
            self.btn_transfer_GAN.setEnabled(True)
            return
        self.t = TransferTread(self.path_content_img[0], isGAN=True, isSR=self.isSR, mode=self.mode)
        self.t._res.connect(self.GAN_transfer_t)
        self.t.start()

    def GAN_transfer_t(self, res):
        self.path_res_img = res
        self.res_img.setPixmap(QPixmap(self.path_res_img))
        self.res_img.setScaledContents(True)
        self.log_label.setText(f"result img saved in {self.path_res_img}")
        self.btn_transfer_GAN.setEnabled(True)

    def mode_choose(self):
        self.mode = self.sender().text() + "2photo"
        print(self.mode)

    def _exert_error(self, msg):
        QMessageBox.critical(self, "错误", msg)

    def _create_click_handler(self, event):
        if self.path_res_img == '':
            return
        if event.button() == Qt.LeftButton and event.type() == QEvent.MouseButtonDblClick:
            print(f"[style page] qr code img path = {self.path_res_img}")
            img_name = self.path_res_img.split("/")[4].split(".")[0]
            print(f"[style page] img_name = {img_name}")
            print(f"[style page] qr code url = {self.url + '/download/' + img_name}")
            PIL.Image.open(self.generate_qrcode(self.url + "/download/" + img_name)).show()

    def generate_qrcode(self, url):
        res_path = 'webpage_download.png'
        import os
        if os.path.exists(res_path):
            os.remove(res_path)

        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=15,
            border=4,
        )
        qr.add_data(url)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        plt.imsave(res_path, img)
        return res_path



class TransferTread(QThread):
    _res = pyqtSignal(str)

    def __init__(self, path_content_img, path_style_img=None, epochs=2500, isSR=True, isGAN=False, mode=None):
        super().__init__()
        self.path_c = path_content_img
        self.path_s = path_style_img
        self.epochs = epochs
        self.isSR = isSR
        self.isGan = isGAN
        self.mode = mode

    def run(self):
        if not self.isGan:
            trans = ImgTransfer(self.path_c, self.path_s)
            res = trans.transfer(self.epochs)
            self._res.emit(res)
        else:
            if self.mode is None:
                self._res.emit(-1)
            res = ImgTransfer.transfer_GAN(self.path_c, self.isSR, mode=self.mode)
            self._res.emit(res)
